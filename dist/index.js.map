{"version":3,"sources":["../src/index.ts","../src/actions/new.ts","../src/helpers/fs.ts","../src/helpers/constants.ts","../src/helpers/config.ts","../src/helpers/validate.ts","../src/scripts/init.ts","../src/scripts/set.ts","../src/scripts/update.ts","../package.json"],"sourcesContent":["#!/usr/bin/env node\n\nimport cac from \"cac\"\nimport { newProject } from \"./actions\"\nimport { init, update, set } from \"./scripts\"\n\nimport { version } from \"../package.json\"\n\nconst cli = cac('wid');\n\ncli\n  .command('[..files]', 'default command: init、update')\n  .option('--repo [repo url]', 'set a custom repository url')\n  .action((name, options) => {\n    switch(name) {\n      case \"init\": init(); break;\n      case \"set\": set(options); break;\n      case \"reset\": set({'--': [], reset: true}); break;\n      case \"update\": update(); break;\n      default: return null;\n    }\n  })\n\ncli\n  .command('new [name]', 'create project based on a specified boilerplate')\n  .option('--path [path]', 'path corresponding to the project boilerplate')\n  .example('--path monorepo/turbo')\n  .action(newProject)\n\ncli.help().version(version).parse()\n\n","import { join } from \"node:path\"\nimport color from \"picocolors\"\nimport {\n  log,\n  text,\n  note,\n  intro,\n  outro,\n  group,\n  select,\n  cancel,\n  spinner\n} from \"@clack/prompts\"\n\nimport config from \"../helpers/config\"\nimport { validateNpmName } from \"../helpers/validate\"\nimport { copy, isExist, readJson, updateJson } from \"../helpers/fs\"\nimport { BOILERPLATES_DIR, BOILERPLATES_JSON } from \"../helpers/constants\"\n\ntype BoilerplateItem = {\n  name: string\n  children: { name: string }[]\n}\n\nexport default async (name: string, option: any) => {\n  intro(color.bgCyan(' wid new project '))\n\n  if (!name) {\n    name = await text({\n      message: \"what is the name of your project?\",\n      placeholder: \"your project name\",\n      validate(value) {\n        if (value.length <= 0) return 'project name is required!'\n      }\n    }) as string\n    console.log(color.magenta(name))\n  }\n\n  try {\n    const { valid, problems } = validateNpmName(name);\n    if (!valid) {\n      problems?.forEach(item => log.error(color.red(item)))\n      outro('new project failed!')\n      return;\n    }\n\n    const boilerplates = await readJson(BOILERPLATES_JSON);\n    const project = await group(\n      {\n        category: () => select<any, string>({\n          message: \"select a project category\",\n          options: boilerplates.map((item: BoilerplateItem) => ({ value: item.name, label: item.name }))\n        }),\n        template: ({ results }) => {\n          const category = results.category;\n          const list = boilerplates.find((item: BoilerplateItem) => item.name === category).children;\n          if (!list.length) {\n            return cancel(`cannot find the boilerplate under ${color.bold(category)}/`);\n          }\n          return select<any, string>({\n            message: \"select a project template\",\n            options: list.map((item: Pick<BoilerplateItem, 'name'>) => ({ value: item.name, label: item.name }))\n          })\n        }\n      },\n      {\n        onCancel: ({results}) => {\n          const processKeys = Object.keys(results).join(', ');\n          outro(`${processKeys} operation cancelled!`)\n          process.exit(0);\n        }\n      }\n    )\n  \n    const s = spinner();\n    const copySource = ['**'];\n    const { category, template } = project;\n    const destDir = join(process.cwd(), `/${name}`);\n    const projectExist = await isExist(destDir);\n    const { boilerplateDir = BOILERPLATES_DIR } = await config();\n    \n    s.start('project boilerplate generating...');\n    if (projectExist) {\n      log.error(`folder ${name} had already been existed!`)\n      s.stop(`new project ${name} failed`);\n      return;\n    }\n    await copy(copySource, destDir, {\n      parents: true,\n      cwd: `${boilerplateDir}/${category}/${template}`\n    })\n    await updateJson(`${destDir}/package.json`, res => ({\n      ...res,\n      name\n    }));\n    s.stop('project boilerplate generate completed');\n\n    const nextSteps = `cd   ${name}\\npnpm install\\npnpm dev`;\n\n\t  note(nextSteps, 'then you can'); \n    outro(`new project ${name} complete`)\n  } catch (err) {\n    outro(err?.toString());\n  }\n}","import path from \"node:path\"\nimport {\n  stat,\n  readdir,\n  mkdir,\n  copyFile,\n  readFile,\n  writeFile\n} from \"fs/promises\"\n\nimport glob from \"fast-glob\"\n\n/**\n * detect whether file or directory exists\n * @param path\n * @returns \n */\nexport const isExist = async (path: string) => {\n  const stats = await stat(path).catch(err => null);\n  return stats?.isFile() || stats?.isDirectory()\n};\n/**\n * get directories and files from specified path\n * @param path\n * @returns \n */\nexport const getDirsFromPath = async (path: string) => {\n  const files = await readdir(path, { withFileTypes: true });\n\n  return files.filter(item => {\n    return !item.name.startsWith('.') && item.isDirectory()\n  })\n}\n\ninterface CopyOption {\n  cwd?: string\n  rename?: (basename: string) => string\n  parents?: boolean\n}\n\nconst identity = (x: string) => x\n\n/**\n * copy whole directory from specified path\n * @param src \n * @param dest \n * @param options \n * @returns \n */\nexport const copy = async (\n  src: string | string[],\n  dest: string,\n  { cwd, rename = identity, parents = true }: CopyOption = {}\n) => {\n  const source = typeof src === 'string' ? [src] : src\n\n  if (source.length === 0 || !dest) {\n    throw new TypeError('`src` and `dest` are required')\n  }\n\n  const sourceFiles = await glob(source, {\n    cwd,\n    dot: true,\n    absolute: false,\n    stats: false,\n  })\n\n  const destRelativeToCwd = cwd ? path.resolve(cwd, dest) : dest\n\n  return Promise.all(\n    sourceFiles.map(async (p) => {\n      const dirname = path.dirname(p)\n      const basename = rename(path.basename(p))\n\n      const from = cwd ? path.resolve(cwd, p) : p\n      const to = parents\n        ? path.join(destRelativeToCwd, dirname, basename)\n        : path.join(destRelativeToCwd, basename)\n\n      // Ensure the destination directory exists\n      await mkdir(path.dirname(to), { recursive: true })\n\n      return copyFile(from, to)\n    })\n  )\n}\n\n/**\n * read specified json file\n * @param path \n * @returns \n */\nexport const readJson = async <T extends object = any>(path: string): Promise<T> => {\n  const exist = await isExist(path);\n\n  if (!exist) {\n    throw new Error(`Cannot find ${path}`);\n  }\n\n  try {\n    const jsonStr = await readFile(path, 'utf-8');\n    return JSON.parse(jsonStr)\n  } catch (err: any) {\n    throw new Error(`Cannot read ${path}: ${err?.message}`);\n  }\n}\n\n/**\n * write data to specified json file\n * @param path \n * @param value \n */\nexport const writeJson = async <T extends object = object>(\n  path: string,\n  value: T\n): Promise<void> => {\n  try {\n    await writeFile(path, JSON.stringify(value, null, 2));\n  } catch (err: any) {\n    throw new Error(`Cannot write ${path}: ${err?.message}`);\n  }\n}\n\n/**\n * update data to specified json file\n * @param path \n * @param updater \n */\nexport const updateJson = async <T extends object = any, U extends object = T>(\n  path: string,\n  updater: (value: T) => U\n): Promise<void> => {\n  const updateValue = updater(await readJson(path));\n  await writeJson(path, updateValue)\n}","import { homedir } from \"node:os\"\n\nexport const WID_DIR = `${homedir()}/.wid`\nexport const BOILERPLATES_DIR = `${WID_DIR}/boilerplates`\nexport const BOILERPLATES_JSON = `${WID_DIR}/boilerplates.json`\nexport const BOILERPLATES_REPO = 'https://github.com/zhaohuanyuu/wid-templates.git'","import { log } from \"@clack/prompts\"\n\nimport { readJson } from \"./fs\"\nimport { WID_DIR } from \"./constants\"\n\nexport default async () => {\n  try {\n    return await readJson(`${WID_DIR}/config.json`);\n  } catch (err) {\n    return {};\n  }\n};","import validateProjectName from 'validate-npm-package-name'\n\n/**\n * validate project name as npm package\n * @param name {string}\n * @returns \n */\nexport function validateNpmName(name: string): {\n  valid: boolean\n  problems?: string[]\n} {\n  const nameValidation = validateProjectName(name)\n  if (nameValidation.validForNewPackages) {\n    return { valid: true }\n  }\n\n  return {\n    valid: false,\n    problems: [\n      ...(nameValidation.errors || []),\n      ...(nameValidation.warnings || []),\n    ],\n  }\n}\n","import { writeFile } from \"node:fs/promises\"\nimport color from \"picocolors\"\nimport { simpleGit } from \"simple-git\"\nimport { intro, outro, spinner, log } from \"@clack/prompts\"\n\nimport config from \"../helpers/config\"\nimport { getDirsFromPath, isExist } from \"../helpers/fs\"\nimport { BOILERPLATES_DIR, BOILERPLATES_JSON, BOILERPLATES_REPO } from \"../helpers/constants\"\n\nexport default async (isSet?: boolean) => {\n  const s = spinner();\n  const git = simpleGit();\n  const tipPrefix = isSet ? 're' : '';\n  const {\n    repoUrl = BOILERPLATES_REPO,\n    boilerplateDir = BOILERPLATES_DIR\n  } = await config();\n\n  intro(color.bgCyan(` wid ${tipPrefix}initializing `));\n\n  // log.warning(color.bgMagenta(' debug > repoUrl: ') + repoUrl)\n\n  try {\n    const repoExist = await isExist(boilerplateDir);\n    \n    // check project boilerplates is exist\n    if (repoExist) {\n      log.info(`project boilerplates already downloaded`);\n      log.success(`you can access at: ${color.underline(boilerplateDir)}`);\n      outro(`wid has been ${tipPrefix}initialized`);\n      return;\n    }\n\n    // download project boilerplates\n    s.start('project boilerplates downloading...');\n    await git.clone(repoUrl, boilerplateDir, ['--depth=1']);\n    s.stop(`project boilerplates already downloaded`);\n    log.success(`you can access at: ${color.underline(boilerplateDir)}`);\n\n    // generate boilerplates structure json file\n    const dirs = await getDirsFromPath(boilerplateDir);\n    const result = await Promise.all(dirs.map(async (dir) => {\n      const name = dir.name;\n      const subDirs = await getDirsFromPath(dir.path + '/' + name);\n      return {\n        name: name,\n        children: subDirs.map(subDir => ({ name: subDir.name }))\n      };\n    }));\n    await writeFile(BOILERPLATES_JSON, JSON.stringify(result, null, 2));\n\n    outro(`wid has been ${tipPrefix}initialized`);\n  } catch(err) {\n    outro(err?.toString());\n  }\n}","import { log } from \"@clack/prompts\"\n\nimport { init } from \"./index\"\nimport { WID_DIR } from \"../helpers/constants\"\nimport { writeJson, updateJson } from \"../helpers/fs\"\n\ntype Options = {\n  '--': any[],\n  [k: string]: any\n}\n\nexport default async (options: Options) => {\n  const { repo, reset } = options;\n  const config = `${WID_DIR}/config.json`;\n\n  // set project boilerplate repository url\n  if (repo) {\n    const isHttps = /^https:\\/\\/github\\.com\\/([a-zA-Z\\d_-]+)\\/([a-zA-Z\\d_-]+)(\\.git)?$/;\n    const isSsh = /^git@github\\.com:([a-zA-Z\\d_-]+)\\/([a-zA-Z\\d_-]+)(\\.git)?$/;\n    const isValid = isHttps.test(repo) || isSsh.test(repo);\n\n    if (!isValid) {\n      log.error('It\\'s not a valid github repository url!')\n      return;\n    }\n\n    const repoNameRegex = /\\/([^/]+)\\.git$/;\n    const [, repoName = ''] = repo.match(repoNameRegex);\n\n    await writeJson(config, {\n      repoUrl: repo,\n      boilerplateDir: `${WID_DIR}/${repoName}`\n    })\n\n    // run init again\n    await init(true);\n  }\n\n  // reset configuration\n  if (reset) {\n    await updateJson(config, res => ({}));\n    await init(true);\n  }\n}","import { homedir } from \"os\"\nimport color from \"picocolors\"\nimport { simpleGit } from \"simple-git\"\nimport { intro, outro, spinner } from \"@clack/prompts\"\nimport { BOILERPLATES_DIR } from \"../helpers/constants\"\n\nexport default async () => {\n  const git = simpleGit(BOILERPLATES_DIR);\n\n  intro(color.bgCyan('wid update'));\n\n  try {\n    const loading = spinner();\n    loading.start(\"update project boilerplates...\");\n    await git.pull();\n    loading.stop(\"wid has been updated\");\n  } catch (err) {\n    outro(err?.toString())\n  }\n}","{\n  \"name\": \"wid-cli\",\n  \"type\": \"module\",\n  \"author\": \"auu\",\n  \"version\": \"0.1.7\",\n  \"description\": \"various project boilerplate creation and tool scaffolding powered by clack\",\n  \"main\": \"src/index.ts\",\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  },\n  \"bin\": {\n    \"wid\": \"dist/index.js\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --ext .ts\",\n    \"lint:fix\": \"eslint --ext .ts --fix\",\n    \"publish\": \"pnpm run build && changeset publish\",\n    \"start\": \"tsup --watch --env.NODE_ENV development\",\n    \"build\": \"tsup --minify --env.NODE_ENV production\"\n  },\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"cli\",\n    \"boilerplate generator\"\n  ],\n  \"dependencies\": {\n    \"@clack/core\": \"^0.3.3\",\n    \"@clack/prompts\": \"^0.7.0\",\n    \"cac\": \"^6.7.14\",\n    \"fast-glob\": \"^3.3.2\",\n    \"picocolors\": \"^1.0.0\",\n    \"simple-git\": \"^3.21.0\",\n    \"validate-npm-package-name\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"@changesets/cli\": \"^2.27.1\",\n    \"@types/node\": \"^20.10.3\",\n    \"@types/validate-npm-package-name\": \"^4.0.2\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.15.0\",\n    \"@typescript-eslint/parser\": \"^6.15.0\",\n    \"eslint\": \"^8.56.0\",\n    \"tsup\": \"^8.0.1\",\n    \"typescript\": \"^5.3.2\"\n  }\n}\n"],"mappings":"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","names":["path","category","writeFile","color","intro","outro","spinner","log","spinner","intro","color","log","outro","writeFile","log","log","color","simpleGit","intro","outro","spinner","simpleGit","intro","color","spinner","outro"]}