{"version":3,"sources":["../src/index.ts","../src/actions/new.ts","../src/helpers/fs.ts","../src/helpers/constants.ts","../src/helpers/config.ts","../src/helpers/validate.ts","../src/scripts/init.ts","../src/scripts/set.ts","../src/scripts/update.ts","../package.json"],"sourcesContent":["#!/usr/bin/env node\n\nimport cac from \"cac\"\nimport { newProject } from \"./actions\"\nimport { init, update, set } from \"./scripts\"\n\nimport { version } from \"../package.json\"\n\nconst cli = cac('wid');\n\ncli\n  .command('[..files]', 'default command: init、update')\n  .option('--repo [repo url]', 'set a custom repository url')\n  .action((name, options) => {\n    switch(name) {\n      case \"init\": init(); break;\n      case \"set\": set(options); break;\n      case \"reset\": set({'--': [], reset: true}); break;\n      case \"update\": update(); break;\n      default: return null;\n    }\n  })\n\ncli\n  .command('new [name]', 'create project based on a specified boilerplate')\n  .option('--path [path]', 'path corresponding to the project boilerplate')\n  .example('--path monorepo/turbo')\n  .action(newProject)\n\ncli.help().version(version).parse()\n\n","import { join } from \"node:path\"\nimport color from \"picocolors\"\nimport {\n  log,\n  text,\n  note,\n  intro,\n  outro,\n  group,\n  select,\n  cancel,\n  spinner\n} from \"@clack/prompts\"\n\nimport config from \"../helpers/config\"\nimport { validateNpmName } from \"../helpers/validate\"\nimport { copy, isExist, readJson, updateJson } from \"../helpers/fs\"\nimport { BOILERPLATES_DIR, BOILERPLATES_JSON } from \"../helpers/constants\"\n\ntype BoilerplateItem = {\n  name: string\n  children: { name: string }[]\n}\n\nexport default async (name: string, option: any) => {\n  intro(color.bgCyan(' wid new project '))\n\n  if (!name) {\n    name = await text({\n      message: \"what is the name of your project?\",\n      placeholder: \"your project name\",\n      validate(value) {\n        if (value.length <= 0) return 'project name is required!'\n      }\n    }) as string\n    console.log(color.magenta(name))\n  }\n\n  try {\n    const { valid, problems } = validateNpmName(name);\n    if (!valid) {\n      problems?.forEach(item => log.error(color.red(item)))\n      outro('new project failed!')\n      return;\n    }\n\n    const boilerplates = await readJson(BOILERPLATES_JSON);\n    const project = await group(\n      {\n        category: () => select<any, string>({\n          message: \"select a project category\",\n          options: boilerplates.map((item: BoilerplateItem) => ({ value: item.name, label: item.name }))\n        }),\n        template: ({ results }) => {\n          const category = results.category;\n          const list = boilerplates.find((item: BoilerplateItem) => item.name === category).children;\n          if (!list.length) {\n            return cancel(`cannot find the boilerplate under ${color.bold(category)}/`);\n          }\n          return select<any, string>({\n            message: \"select a project template\",\n            options: list.map((item: Pick<BoilerplateItem, 'name'>) => ({ value: item.name, label: item.name }))\n          })\n        }\n      },\n      {\n        onCancel: ({results}) => {\n          const processKeys = Object.keys(results).join(', ');\n          outro(`${processKeys} operation cancelled!`)\n          process.exit(0);\n        }\n      }\n    )\n  \n    const s = spinner();\n    const copySource = ['**'];\n    const { category, template } = project;\n    const destDir = join(process.cwd(), `/${name}`);\n    const projectExist = await isExist(destDir);\n    const { boilerplateDir = BOILERPLATES_DIR } = await config();\n    \n    s.start('project boilerplate generating...');\n    if (projectExist) {\n      log.error(`folder ${name} had already been existed!`)\n      s.stop(`new project ${name} failed`);\n      return;\n    }\n    await copy(copySource, destDir, {\n      parents: true,\n      cwd: `${boilerplateDir}/${category}/${template}`\n    })\n    await updateJson(`${destDir}/package.json`, res => ({\n      ...res,\n      name\n    }));\n    s.stop('project boilerplate generate completed');\n\n    const nextSteps = `cd   ${name}\\npnpm install\\npnpm dev`;\n\n\t  note(nextSteps, 'then you can'); \n    outro(`new project ${name} complete`)\n  } catch (err) {\n    outro(err?.toString());\n  }\n}","import path from \"node:path\"\nimport {\n  stat,\n  readdir,\n  mkdir,\n  copyFile,\n  readFile,\n  writeFile\n} from \"fs/promises\"\n\nimport glob from \"fast-glob\"\n\n/**\n * detect whether file or directory exists\n * @param path\n * @returns \n */\nexport const isExist = async (path: string) => {\n  const stats = await stat(path).catch(err => null);\n  return stats?.isFile() || stats?.isDirectory()\n};\n/**\n * get directories and files from specified path\n * @param path\n * @returns \n */\nexport const getDirsFromPath = async (path: string) => {\n  const files = await readdir(path, { withFileTypes: true });\n\n  return files.filter(item => {\n    return !item.name.startsWith('.') && item.isDirectory()\n  })\n}\n\ninterface CopyOption {\n  cwd?: string\n  rename?: (basename: string) => string\n  parents?: boolean\n}\n\nconst identity = (x: string) => x\n\n/**\n * copy whole directory from specified path\n * @param src \n * @param dest \n * @param options \n * @returns \n */\nexport const copy = async (\n  src: string | string[],\n  dest: string,\n  { cwd, rename = identity, parents = true }: CopyOption = {}\n) => {\n  const source = typeof src === 'string' ? [src] : src\n\n  if (source.length === 0 || !dest) {\n    throw new TypeError('`src` and `dest` are required')\n  }\n\n  const sourceFiles = await glob(source, {\n    cwd,\n    dot: true,\n    absolute: false,\n    stats: false,\n  })\n\n  const destRelativeToCwd = cwd ? path.resolve(cwd, dest) : dest\n\n  return Promise.all(\n    sourceFiles.map(async (p) => {\n      const dirname = path.dirname(p)\n      const basename = rename(path.basename(p))\n\n      const from = cwd ? path.resolve(cwd, p) : p\n      const to = parents\n        ? path.join(destRelativeToCwd, dirname, basename)\n        : path.join(destRelativeToCwd, basename)\n\n      // Ensure the destination directory exists\n      await mkdir(path.dirname(to), { recursive: true })\n\n      return copyFile(from, to)\n    })\n  )\n}\n\n/**\n * read specified json file\n * @param path \n * @returns \n */\nexport const readJson = async <T extends object = any>(path: string): Promise<T> => {\n  const exist = await isExist(path);\n\n  if (!exist) {\n    throw new Error(`Cannot find ${path}`);\n  }\n\n  try {\n    const jsonStr = await readFile(path, 'utf-8');\n    return JSON.parse(jsonStr)\n  } catch (err: any) {\n    throw new Error(`Cannot read ${path}: ${err?.message}`);\n  }\n}\n\n/**\n * write data to specified json file\n * @param path \n * @param value \n */\nexport const writeJson = async <T extends object = object>(\n  path: string,\n  value: T\n): Promise<void> => {\n  try {\n    await writeFile(path, JSON.stringify(value, null, 2));\n  } catch (err: any) {\n    throw new Error(`Cannot write ${path}: ${err?.message}`);\n  }\n}\n\n/**\n * update data to specified json file\n * @param path \n * @param updater \n */\nexport const updateJson = async <T extends object = any, U extends object = T>(\n  path: string,\n  updater: (value: T) => U\n): Promise<void> => {\n  const updateValue = updater(await readJson(path));\n  await writeJson(path, updateValue)\n}","import { homedir } from \"node:os\"\n\nexport const WID_DIR = `${homedir()}/.wid`\nexport const BOILERPLATES_DIR = `${WID_DIR}/boilerplates`\nexport const BOILERPLATES_JSON = `${WID_DIR}/boilerplates.json`\nexport const BOILERPLATES_REPO = 'https://github.com/zhaohuanyuu/wid-templates.git'","import { log } from \"@clack/prompts\"\n\nimport { readJson } from \"./fs\"\nimport { WID_DIR } from \"./constants\"\n\nexport default async () => {\n  try {\n    return await readJson(`${WID_DIR}/config.json`);\n  } catch (err) {\n    return {};\n  }\n};","import validateProjectName from 'validate-npm-package-name'\n\n/**\n * validate project name as npm package\n * @param name {string}\n * @returns \n */\nexport function validateNpmName(name: string): {\n  valid: boolean\n  problems?: string[]\n} {\n  const nameValidation = validateProjectName(name)\n  if (nameValidation.validForNewPackages) {\n    return { valid: true }\n  }\n\n  return {\n    valid: false,\n    problems: [\n      ...(nameValidation.errors || []),\n      ...(nameValidation.warnings || []),\n    ],\n  }\n}\n","import { writeFile } from \"node:fs/promises\"\nimport color from \"picocolors\"\nimport { simpleGit } from \"simple-git\"\nimport { intro, outro, spinner, log } from \"@clack/prompts\"\n\nimport config from \"../helpers/config\"\nimport { getDirsFromPath, isExist } from \"../helpers/fs\"\nimport { BOILERPLATES_DIR, BOILERPLATES_JSON, BOILERPLATES_REPO } from \"../helpers/constants\"\n\nexport default async (isSet?: boolean) => {\n  const s = spinner();\n  const git = simpleGit();\n  const tipPrefix = isSet ? 're' : '';\n  const {\n    repoUrl = BOILERPLATES_REPO,\n    boilerplateDir = BOILERPLATES_DIR\n  } = await config();\n\n  intro(color.bgCyan(` wid ${tipPrefix}initializing `));\n\n  // log.warning(color.bgMagenta(' debug > repoUrl: ') + repoUrl)\n\n  try {\n    const repoExist = await isExist(boilerplateDir);\n    \n    // check project boilerplates is exist\n    if (repoExist) {\n      log.info(`project boilerplates already downloaded`);\n      log.success(`you can access at: ${color.underline(boilerplateDir)}`);\n      outro(`wid has been ${tipPrefix}initialized`);\n      return;\n    }\n\n    // download project boilerplates\n    s.start('project boilerplates downloading...');\n    await git.clone(repoUrl, boilerplateDir, ['--depth=1']);\n    s.stop(`project boilerplates already downloaded`);\n    log.success(`you can access at: ${color.underline(boilerplateDir)}`);\n\n    // generate boilerplates structure json file\n    const dirs = await getDirsFromPath(boilerplateDir);\n    const result = await Promise.all(dirs.map(async (dir) => {\n      const name = dir.name;\n      const subDirs = await getDirsFromPath(dir.path + '/' + name);\n      return {\n        name: name,\n        children: subDirs.map(subDir => ({ name: subDir.name }))\n      };\n    }));\n    await writeFile(BOILERPLATES_JSON, JSON.stringify(result, null, 2));\n\n    outro(`wid has been ${tipPrefix}initialized`);\n  } catch(err) {\n    outro(err?.toString());\n  }\n}","import { log } from \"@clack/prompts\"\n\nimport { init } from \"./index\"\nimport { WID_DIR } from \"../helpers/constants\"\nimport { writeJson, updateJson } from \"../helpers/fs\"\n\ntype Options = {\n  '--': any[],\n  [k: string]: any\n}\n\nexport default async (options: Options) => {\n  const { repo, reset } = options;\n  const config = `${WID_DIR}/config.json`;\n\n  // set project boilerplate repository url\n  if (repo) {\n    const isHttps = /^https:\\/\\/github\\.com\\/([a-zA-Z\\d_-]+)\\/([a-zA-Z\\d_-]+)(\\.git)?$/;\n    const isSsh = /^git@github\\.com:([a-zA-Z\\d_-]+)\\/([a-zA-Z\\d_-]+)(\\.git)?$/;\n    const isValid = isHttps.test(repo) || isSsh.test(repo);\n\n    if (!isValid) {\n      log.error('It\\'s not a valid github repository url!')\n      return;\n    }\n\n    const repoNameRegex = /\\/([^/]+)\\.git$/;\n    const [, repoName = ''] = repo.match(repoNameRegex);\n\n    await writeJson(config, {\n      repoUrl: repo,\n      boilerplateDir: `${WID_DIR}/${repoName}`\n    })\n\n    // run init again\n    await init(true);\n  }\n\n  // reset configuration\n  if (reset) {\n    await updateJson(config, res => ({}));\n    await init(true);\n  }\n}","import { homedir } from \"os\"\nimport color from \"picocolors\"\nimport { simpleGit } from \"simple-git\"\nimport { intro, outro, spinner } from \"@clack/prompts\"\nimport { BOILERPLATES_DIR } from \"../helpers/constants\"\n\nexport default async () => {\n  const git = simpleGit(BOILERPLATES_DIR);\n\n  intro(color.bgCyan('wid update'));\n\n  try {\n    const loading = spinner();\n    loading.start(\"update project boilerplates...\");\n    await git.pull();\n    loading.stop(\"wid has been updated\");\n  } catch (err) {\n    outro(err?.toString())\n  }\n}","{\n  \"name\": \"wid-cli\",\n  \"type\": \"module\",\n  \"author\": \"auu\",\n  \"version\": \"0.1.8\",\n  \"description\": \"various project boilerplate creation and tool scaffolding powered by clack\",\n  \"main\": \"src/index.ts\",\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  },\n  \"bin\": {\n    \"wid\": \"dist/index.js\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --ext .ts\",\n    \"lint:fix\": \"eslint --ext .ts --fix\",\n    \"publish\": \"pnpm run build && changeset publish\",\n    \"start\": \"tsup --watch --env.NODE_ENV development\",\n    \"build\": \"tsup --minify --env.NODE_ENV production\"\n  },\n  \"license\": \"MIT\",\n  \"keywords\": [\n    \"cli\",\n    \"boilerplate generator\"\n  ],\n  \"dependencies\": {\n    \"@clack/core\": \"^0.3.3\",\n    \"@clack/prompts\": \"^0.7.0\",\n    \"cac\": \"^6.7.14\",\n    \"fast-glob\": \"^3.3.2\",\n    \"picocolors\": \"^1.0.0\",\n    \"simple-git\": \"^3.21.0\",\n    \"validate-npm-package-name\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"@changesets/cli\": \"^2.27.1\",\n    \"@types/node\": \"^20.10.3\",\n    \"@types/validate-npm-package-name\": \"^4.0.2\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.15.0\",\n    \"@typescript-eslint/parser\": \"^6.15.0\",\n    \"eslint\": \"^8.56.0\",\n    \"tsup\": \"^8.0.1\",\n    \"typescript\": \"^5.3.2\"\n  }\n}\n"],"mappings":"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","names":["cac","join","color","log","text","note","intro","outro","group","select","cancel","spinner","path","stat","readdir","mkdir","copyFile","readFile","writeFile","glob","isExist","stats","err","getDirsFromPath","item","identity","x","copy","src","dest","cwd","rename","parents","source","sourceFiles","destRelativeToCwd","p","dirname","basename","from","to","readJson","jsonStr","writeJson","value","updateJson","updater","updateValue","homedir","WID_DIR","BOILERPLATES_DIR","BOILERPLATES_JSON","BOILERPLATES_REPO","config_default","readJson","WID_DIR","validateProjectName","validateNpmName","name","nameValidation","new_default","name","option","intro","color","text","value","valid","problems","validateNpmName","item","log","outro","boilerplates","readJson","BOILERPLATES_JSON","project","group","select","results","category","list","cancel","processKeys","s","spinner","copySource","template","destDir","join","projectExist","isExist","boilerplateDir","BOILERPLATES_DIR","config_default","copy","updateJson","res","nextSteps","note","err","writeFile","color","simpleGit","intro","outro","spinner","log","init_default","isSet","s","spinner","git","simpleGit","tipPrefix","repoUrl","BOILERPLATES_REPO","boilerplateDir","BOILERPLATES_DIR","config_default","intro","color","isExist","log","outro","dirs","getDirsFromPath","result","dir","name","subDirs","subDir","writeFile","BOILERPLATES_JSON","err","log","set_default","options","repo","reset","config","WID_DIR","isHttps","isSsh","log","repoNameRegex","repoName","writeJson","init_default","updateJson","res","color","simpleGit","intro","outro","spinner","update_default","git","simpleGit","BOILERPLATES_DIR","intro","color","loading","spinner","err","outro","version","cli","cac","name","options","init_default","set_default","update_default","new_default","version"]}